@page "/appsetups"

<MudCard class="ma-4">
	<MudCardHeader>
		<CardHeaderContent>
			<MudText Typo="Typo.h5">App Setups</MudText>
		</CardHeaderContent>
	</MudCardHeader>
	<MudCardContent>
		<MudButton @onclick="OpenCreateDialog" Variant="Variant.Filled" Color="Color.Primary">
			Create App Setup
		</MudButton>
		<MudTable Items="@_model.AppSetups" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading"
			LoadingProgressColor="Color.Info">
			<HeaderContent>
				<MudTh>#</MudTh>
				<MudTh>Name</MudTh>
				<MudTh>Path</MudTh>
				<MudTh>Arguments</MudTh>
				<MudTh>Actions</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd>@(_model.AppSetups.IndexOf(context)+1)</MudTd>
				<MudTd DataLabel="Name">@context.Name</MudTd>
				<MudTd DataLabel="Path" Style="max-width: 20rem; white-space: nowrap; text-overflow: ellipsis; overflow: hidden">@context.Path</MudTd>
				<MudTd DataLabel="Arguments">@context.Arguments</MudTd>
				<MudTd DataLabel="Actions" Class="d-flex justify-sm-space-between">
					<div>
						<MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit" OnClick="(() => OpenEditDialog(context))"></MudIconButton>
						<MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="(() => Delete(context))"></MudIconButton>
					</div>
				</MudTd>
			</RowTemplate>
		</MudTable>
	</MudCardContent>
</MudCard>

@code {
	[Inject] private IMediator Mediator { get; set; } = default!;
	[Inject] private IDialogService DialogService { get; set; } = default!;

	private Model _model = new();
	private bool _loading;
	private readonly DialogOptions _dialogOptions = new DialogOptions() { CloseOnEscapeKey = true };

	protected override async Task OnInitializedAsync() => await LoadData();

	private async Task OpenCreateDialog()
	{
		var dialog = await DialogService.ShowAsync<CreateOrUpdateDialog>("Create", _dialogOptions);
		var result = await dialog.Result;
		if (!result.Canceled)
		{
			await LoadData();
		}
	}

	private async Task OpenEditDialog(Model.AppSetup appSetup)
	{
		var parameters = new DialogParameters<CreateOrUpdateDialog>();
		parameters.Add(x => x.AppSetup, appSetup);

		var dialog = await DialogService.ShowAsync<CreateOrUpdateDialog>("Update", parameters, _dialogOptions);
		var result = await dialog.Result;
		if (!result.Canceled)
		{
			await LoadData();
		}
	}

	private async Task Delete(Model.AppSetup appSetup)
	{
		var parameters = new DialogParameters<ConfirmationDialog>();
		parameters.Add(x => x.ContentText, $"Are you sure you want to delete '{appSetup.Name}' ?");

		var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete", parameters, _dialogOptions);
		var result = await dialog.Result;
		if (!result.Canceled)
		{
			await Mediator.Send(new DeleteCommand(appSetup.Id));
			await LoadData();
		}
	}

	private async Task LoadData()
	{
		_loading = true;
		StateHasChanged();
		_model = await Mediator.Send(new GetModelQuery());
		_loading = false;
	}

	public record DeleteCommand(string Id) : IRequest;

	public record GetModelQuery : IRequest<Model> { }

	public record Model
	{
		public List<AppSetup> AppSetups { get; set; } = [];

		public record AppSetup(string Id, string Name, string Path, string? Arguments);
	}

	public class GetModelQueryHandler(IAppSetupsService _appSetupsService) : IRequestHandler<GetModelQuery, Model>
	{
		public async Task<Model> Handle(GetModelQuery request, CancellationToken cancellationToken)
		{
			var appSetupDtos = await _appSetupsService.List();
			return new Model { AppSetups = appSetupDtos.Select(x => new Model.AppSetup(x.Id, x.Name, x.Path, x.Arguments)).ToList() };
		}
	}

	public class DeleteCommandHandler(IAppSetupsService _appSetupsService) : IRequestHandler<DeleteCommand>
	{
		public async Task Handle(DeleteCommand request, CancellationToken cancellationToken)
		{
			await _appSetupsService.Delete(request.Id);
		}
	}
}