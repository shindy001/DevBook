@page "/startupprofiles"

<MudCard class="ma-4">
	<MudCardHeader>
		<CardHeaderContent>
			<MudText Typo="Typo.h5">Startup Profiles</MudText>
		</CardHeaderContent>
	</MudCardHeader>
	<MudCardContent>
		<MudTable Items="@_model.StartupProfiles" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading"
			LoadingProgressColor="Color.Info">
			<HeaderContent>
				<MudTh>#</MudTh>
				<MudTh>Name</MudTh>
				<MudTh>AppSetups</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd>@(_model.StartupProfiles.IndexOf(context)+1)</MudTd>
				<MudTd DataLabel="Name">@context.Name</MudTd>
				<MudTd DataLabel="AppSetups">@string.Join(", ", context.AppSetupNames)</MudTd>
			</RowTemplate>
		</MudTable>
	</MudCardContent>
</MudCard>

@code {
	[Inject] private IMediator Mediator { get; set; } = default!;

	private Model _model = new();
	private bool _loading;

	protected override async Task OnInitializedAsync()
	{
		_loading = true;
		_model = await Mediator.Send(new Query());
		_loading = false;
	}

	public class Query : IRequest<Model> { }

	public class Model
	{
		public List<StartupProfile> StartupProfiles { get; set; } = [];

		public record StartupProfile(string Id, string Name, IEnumerable<string> AppSetupNames);
	}

	public class Handler(
		IAppSetupsService _appSetupsService,
		IStartupProfilesService _startupProfilesService) : IRequestHandler<Query, Model>
	{
		public async Task<Model> Handle(Query request, CancellationToken cancellationToken)
		{
			var startupProfileDtos = await _startupProfilesService.List();
			var model = new Model { StartupProfiles = [] };
			foreach (var startuProfileDto in startupProfileDtos)
			{
				var appSetupNames = (await _appSetupsService.GetByIds([.. startuProfileDto.AppSetupIds])).Select(x => x.Name);
				model.StartupProfiles.Add(new Model.StartupProfile(startuProfileDto.Id, startuProfileDto.Name, appSetupNames));
			}
			return model;
		}
	}
}