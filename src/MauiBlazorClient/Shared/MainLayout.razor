@inherits LayoutComponentBase

@* MudBlazor default components *@
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider FullWidth="true" />
<MudSnackbarProvider />

<MudLayout>
	<MudAppBar Elevation="1">
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
			OnClick="MenuDrawerToggle" />
		<MudText Typo="Typo.h5" Class="ml-3">Application</MudText>
		<MudSpacer />
		<div>
			<MudTooltip Delay="_tooltipDelayInMs" Text="Toggle Dark Mode" Placement="Placement.Bottom">
				<MudIconButton Class='@(_isDarkMode ? "d-none" : "")' OnClick="ToggleTheme" Icon="@Icons.Material.Filled.DarkMode" Color="Color.Inherit" />
			</MudTooltip>
			<MudTooltip Delay="_tooltipDelayInMs" Text="Toggle Light Mode" Placement="Placement.Bottom">
				<MudIconButton Class='@(_isDarkMode ? "" : "d-none")' OnClick="ToggleTheme" Icon="@Icons.Material.Filled.LightMode" Color="Color.Inherit" />
			</MudTooltip>
			<MudTooltip Delay="_tooltipDelayInMs" Text="Hacker News" Placement="Placement.Bottom">
				<MudIconButton Icon="@Icons.Material.Filled.Newspaper" OnClick="OpenNewsDrawer" Color="Color.Inherit" />
			</MudTooltip>
		</div>
		
	</MudAppBar>
	<MudDrawer @bind-Open="_menuDrawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
		<NavMenu />
	</MudDrawer>
	<MudMainContent>
		<ErrorBoundary @ref="_errorBoundary">
			<ChildContent>
				<div>
					@Body
				</div>
				<div>
					<NewsOverlayDrawerWidget @ref="_newsOverlayDrawerWidget" />
				</div>
			</ChildContent>
			<ErrorContent>
				<ErrorDialog Title="Uh oh. Something went wrong." ErrorMessage="@($"Error: {context.Message}")" />
			</ErrorContent>
		</ErrorBoundary>
	</MudMainContent>
</MudLayout>

@code {
	ErrorBoundary? _errorBoundary;
	private bool _menuDrawerOpen = true;
	private bool _isDarkMode;
	private MudThemeProvider _mudThemeProvider = default!;
	private NewsOverlayDrawerWidget _newsOverlayDrawerWidget = default!;
	private double _tooltipDelayInMs = 600;

	protected override void OnParametersSet()
	{
		// On each page navigation, reset any error state
		_errorBoundary?.Recover();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_isDarkMode = await _mudThemeProvider.GetSystemPreference();
			StateHasChanged();
		}
	}

	private void ToggleTheme()
	{
		_isDarkMode = !_isDarkMode;
	}

	private void MenuDrawerToggle()
	{
		_menuDrawerOpen = !_menuDrawerOpen;
	}

	private void OpenNewsDrawer()
	{
		_newsOverlayDrawerWidget.Open();
	}
}
